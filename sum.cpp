//scanfを使う場合、intはmain()の外で宣言
//数値はprintf
//文字はputs
// stringはcharの列
// Ｃ言語には文字列型という型はない。文字列は，char 型の配列で表される。
// マス目とかならchar[]で、それ以外ならvector[]的な？
// 関数は、その関数が何をするものなのか理解する
// 比較する系のやつは、int i = 1にして、比較前をi-1,比較後をiにしてループを回す
// string op で計算するやつは計算するものと同じfor文内でcinする必要がある

// .map()はメソッド
// 与えられた関数を配列のすべての要素に対して呼び出し、その結果からなる新しい配列を生成します。
// .set()はメソッド
// 指定されたキーと値を持つ要素を Map オブジェクトに追加したり、更新したりします。

// new Mapはオブジェクト　キーと値のペアを保持する。
// new Setはオブジェクト　プリミティブ値やオブジェクト参照を問わず、あらゆる型で一意の値を格納できます。

// 使える技
// map ,set, slice, reduce, toString(), Array.from(), parseInt(), toLowerCase(), replace()←最初に当たった文字しか変えない
// unshift()配列の最初に１つ以上の要素を追加し、新しい配列の長さを返す
// push()配列の末尾に１つ以上の要素を追加することができる。
// filter(コールバック) 与えられた関数によって実装されたテストに合格したすべての配列からなる新しい配列を生成します。
// split()  String を"指定した区切り文字列"で分割することにより、文字列の[配列に]分割します。 join()の逆
// () ("") (" ")(",")
// split() Array ["dog."]
// split("") Array ["d", "o", "g", "."]
// split("()") →"" splitは、""で囲ったものを削除してカンマ区切りの空白をつくる感じ
// splice() 既存の要素を取り除いたり、置き換えたり、新しい要素を追加したりすることで、配列の内容を変更します。
// join() 配列 (または配列風オブジェクト) の全要素を順に連結した文字列を新たに作成して返します。 split()の逆
// すべての区切り文字（,)の後に追加されて、連結された配列になる。 区切り文字がない場合は何も起こらない
// has() 指定されたキーに対する要素が存在するかどうかを示す論理値を返します。
// get() 指定されたキーに対する要素が取得される？指定された要素を Map オブジェクトから返します。指定されたキーに関連付けられた値がオブジェクトである場合は、そのオブジェクトの参照を受け取ることになり、そのオブジェクトに対して変更を行った場合は、 Map オブジェクトの中にあるものに変更が行われます。
// set() メソッドは、指定されたキーと値を持つ要素を Map オブジェクトに追加したり、更新したりします。 かぶっていたら、それは置き換える。
// add() 特定の value をもつ新しい要素を Set オブジェクトの最後に追加します。
// Mapオブジェクトに、set()メソッドで追加。Setオブジェクトに、add()メソッドで追加。
// fill() 開始インデックス（デフォルトは 0）から終了インデックス（デフォルトは array.length）までのすべての要素を、静的な値に変更した配列を返します。
  // const array1 = [1, 2, 3, 4];

  // // fill with 0 from position 2 until position 4
  // console.log(array1.fill(0, 2, 4));
  // // expected output: [1, 2, 0, 0]

  // // fill with 5 from position 1
  // console.log(array1.fill(5, 1));
  // // expected output: [1, 5, 5, 5]

  // console.log(array1.fill(6));
  // // expected output: [6, 6, 6, 6]
// shift() 配列から最初の要素を取り除き、その要素を返します。このメソッドは配列の長さを変えます。
// size Setオブジェクト内の要素の数を返します。
// includes 特定の要素が配列に含まれているかどうかを true または false で返します。